import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    def verPostfix = ""
    defaultConfig {
        applicationId "ru.yourok.m3u8loader"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 169
        versionName "1.3.169"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "M3U8Loader-${versionName}_${variant.flavorName}.apk"
                }
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    flavorDimensions 'main'
    productFlavors {
        lite {
            dimension "main"
        }
        converter {
//            applicationId "ru.yourok.m3u8loader_converter"
            dimension "main"
            verPostfix = "_converter"
            minSdkVersion 16
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'co.zsmb:materialdrawer-kt:1.2.1'
    implementation 'com.crystal:crystalrangeseekbar:1.1.3'
    converterImplementation 'com.infullmobile.android:videokit-release:1.1.2'
}

repositories {
    mavenCentral()
    maven { url 'https://maven.google.com' }
    maven { url 'https://maven.infullmobile.com/public' }
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        if (!variant.buildType.isDebuggable()) {
            def prefix = ""
            if (variant.flavorName != "lite")
                prefix = "_${variant.flavorName}"

            def appID = variant.applicationId
            def apkFileName = "M3U8Loader${prefix}-${variant.versionName}.apk"
            def path = "dist/$appID$prefix"

            println "******* Create update *******"
            println appID
            println apkFileName
            println variant.versionName
            println variant.buildType.name
            println variant.flavorName
            println ""

            def jsonFile = rootProject.file('dist/changelog.json')
            def chagelogJS = new groovy.json.JsonSlurper().parseText(jsonFile.text)
            def changeLogVer = ""
            if (chagelogJS.getAt("$variant.versionName") != null)
                changeLogVer = chagelogJS.getAt("$variant.versionName").join("\n")
            def gitLink = "https://raw.githubusercontent.com/YouROK/M3U8Loader/1.3.x/dist/${appID}/${apkFileName}"

            rootProject.file("$path").mkdir()
            rootProject.file("$path/version.json").createNewFile()
            rootProject.file("$path/version.json").text = """
{
\t"update": {
\t\t"app_id": "$appID",
\t\t"version_code": "$variant.versionCode",
\t\t"version_name": "$variant.versionName",
\t\t"build_date": "${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}",
\t\t"link_github": "$gitLink",
\t\t"changelog": "$changeLogVer"
\t}
}
"""
            // create file where to copy
            def backupFolder = rootProject.file("$path")
            def backupFile = new File(backupFolder, apkFileName)

            variant.outputs.all { output ->
                Task copyAndRenameAPKTask = project.task("copyAndRename${variant.name.capitalize()}APK", type: Copy) {
                    from output.outputFile.getParent()
                    into backupFolder
                    include output.outputFileName
                    rename(output.outputFileName, backupFile.getName())
                }

                // if copyAndRenameAPKTask needs to automatically execute assemble before
                copyAndRenameAPKTask.dependsOn(variant.assemble)
                copyAndRenameAPKTask.mustRunAfter(variant.assemble)

                // if assemble needs to automatically execute copyAndRenameAPKTask after
                variant.assemble.finalizedBy(copyAndRenameAPKTask)
            }
        }
    }
}