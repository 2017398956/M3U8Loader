import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def liteKeystorePropertiesFile = rootProject.file("lite.properties")
def liteProperties = new Properties()
liteProperties.load(new FileInputStream(liteKeystorePropertiesFile))

def convertKeystorePropertiesFile = rootProject.file("convert.properties")
def convertProperties = new Properties()
convertProperties.load(new FileInputStream(convertKeystorePropertiesFile))

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'
    def verPostfix = ""
    defaultConfig {
        applicationId "ru.yourok.m3u8loader"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 177
        versionName "1.3.177"
    }

    signingConfigs {
        release {
            keyAlias liteProperties['keyAlias']
            keyPassword liteProperties['keyPassword']
            storeFile rootProject.file(liteProperties['storeFile'])
            storePassword liteProperties['storePassword']
        }
        converter {
            keyAlias convertProperties['keyAlias']
            keyPassword convertProperties['keyPassword']
            storeFile rootProject.file(convertProperties['storeFile'])
            storePassword convertProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "M3U8Loader-${versionName}_${variant.flavorName}.apk"
                }
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    flavorDimensions 'main'
    productFlavors {
        lite {
            dimension "main"
            signingConfig signingConfigs.release
        }
        converter {
            dimension "main"
            verPostfix = "_converter"
            minSdkVersion 16
            signingConfig signingConfigs.converter
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'co.zsmb:materialdrawer-kt:1.2.1'
    implementation 'com.crystal:crystalrangeseekbar:1.1.3'

    converterImplementation 'com.infullmobile.android:videokit-release:1.1.2'
}

repositories {
    mavenCentral()
    google()
    maven { url 'https://maven.infullmobile.com/public' }
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            Task copyAndRenameAPKTask = project.task("copyAndRename${variant.name.capitalize()}APK", type: Copy) {
                if (variant.buildType.name == "release") {
                    def directory = "dist/${variant.applicationId}_${variant.flavorName}"
                    def fileName = "M3U8Loader_${variant.flavorName}-${variant.versionName}.apk"
                    def filePath = "$directory/$fileName"
                    def gitLink = "https://raw.githubusercontent.com/YouROK/M3U8Loader/1.3.x/${filePath}"

                    println "******* Create update *******"
                    println variant.applicationId
                    println filePath
                    println variant.versionName
                    println variant.buildType.name
                    println variant.flavorName
                    println ""

                    rootProject.file("$directory").mkdir()
                    rootProject.file("$directory/version.json").createNewFile()
                    rootProject.file("$directory/version.json").text = """
{
\t"update": {
\t\t"app_id": "$variant.applicationId ${variant.flavorName}",
\t\t"version_code": "$variant.versionCode",
\t\t"version_name": "${variant.versionName}",
\t\t"build_date": "${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}",
\t\t"link_github": "$gitLink"
\t}
}
"""
                    from output.outputFile.getParent()
                    into rootProject.file(directory)
                    include output.outputFileName
                    rename(output.outputFileName, fileName)
                }
            }

            // if copyAndRenameAPKTask needs to automatically execute assemble before
            copyAndRenameAPKTask.dependsOn(variant.assemble)
            copyAndRenameAPKTask.mustRunAfter(variant.assemble)

            // if assemble needs to automatically execute copyAndRenameAPKTask after
            variant.assemble.finalizedBy(copyAndRenameAPKTask)
        }
    }
}
